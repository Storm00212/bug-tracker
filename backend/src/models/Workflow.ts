/**
 * WORKFLOW MODEL
 *
 * Defines the data structure and validation rules for Workflow entities.
 * Workflows define the valid status transitions for issues in a project.
 * They ensure issues follow proper state transitions based on their type.
 */

import { z } from "zod";

// Workflow transition types
export const transitionTypes = ["global", "conditional"] as const;

// Condition operators for conditional transitions
export const conditionOperators = [
  "equals", "not_equals", "contains", "not_contains",
  "greater_than", "less_than", "in", "not_in"
] as const;

// Zod Schema for Workflow validation and type safety
export const workflowSchema = z.object({
  // Primary key - auto-generated by database
  id: z.number().optional(),

  // Workflow name - human-readable identifier
  name: z.string().min(1, "Workflow name is required"),

  // Description of the workflow
  description: z.string().optional(),

  // Project this workflow belongs to - references Projects table
  projectId: z.number(),

  // Issue type this workflow applies to (null means applies to all types)
  issueType: z.string().optional(),

  // Whether this is the default workflow for the project
  isDefault: z.boolean().default(false),

  // Whether the workflow is active
  isActive: z.boolean().default(true),

  // Timestamps
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

// Schema for workflow steps (statuses)
export const workflowStepSchema = z.object({
  // Primary key
  id: z.number().optional(),

  // Workflow this step belongs to
  workflowId: z.number(),

  // Step name (usually matches status name)
  name: z.string().min(1, "Step name is required"),

  // Status this step represents
  status: z.string().min(1, "Status is required"),

  // Display order in workflow
  order: z.number().default(0),

  // Whether this is the initial step
  isInitial: z.boolean().default(false),

  // Whether this is a final/completed step
  isFinal: z.boolean().default(false),

  // Step properties (stored as JSON)
  properties: z.record(z.any(), z.any()).optional().default({}),
});

// Schema for workflow transitions
export const workflowTransitionSchema = z.object({
  // Primary key
  id: z.number().optional(),

  // Workflow this transition belongs to
  workflowId: z.number(),

  // Source step (from status)
  fromStepId: z.number(),

  // Target step (to status)
  toStepId: z.number(),

  // Transition name
  name: z.string().min(1, "Transition name is required"),

  // Transition type
  type: z.enum(transitionTypes).default("global"),

  // Conditions for conditional transitions (stored as JSON)
  conditions: z.array(z.object({
    field: z.string(),
    operator: z.enum(conditionOperators),
    value: z.any(),
    logicalOperator: z.enum(["AND", "OR"]).optional().default("AND")
  })).optional(),

  // Required permissions/roles for this transition
  requiredRoles: z.array(z.string()).optional().default([]),

  // Screen to show during transition (for additional fields)
  screenId: z.number().optional(),

  // Validators to run before transition
  validators: z.array(z.string()).optional().default([]),

  // Post-functions to execute after transition
  postFunctions: z.array(z.string()).optional().default([]),

  // Display properties
  properties: z.record(z.any(), z.any()).optional().default({}),
});

// TypeScript Types inferred from Zod Schemas
export type Workflow = z.infer<typeof workflowSchema>;
export type WorkflowStep = z.infer<typeof workflowStepSchema>;
export type WorkflowTransition = z.infer<typeof workflowTransitionSchema>;

// Schema for workflow validation results
export const workflowValidationResultSchema = z.object({
  isValid: z.boolean(),
  errors: z.array(z.string()),
  warnings: z.array(z.string()),
  allowedTransitions: z.array(z.object({
    transitionId: z.number(),
    name: z.string(),
    toStatus: z.string()
  }))
});

export type WorkflowValidationResult = z.infer<typeof workflowValidationResultSchema>;