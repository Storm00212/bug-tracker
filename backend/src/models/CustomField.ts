/**
 * CUSTOM FIELD MODEL
 *
 * Defines the data structure and validation rules for Custom Field entities.
 * Custom fields allow projects to extend the issue schema with additional fields
 * like text fields, select dropdowns, dates, numbers, etc.
 */

import { z } from "zod";

// Field types supported by the custom fields system
export const fieldTypes = [
  "text",
  "textarea",
  "select",
  "multiselect",
  "date",
  "datetime",
  "number",
  "checkbox",
  "radio",
  "user",
  "version",
  "component"
] as const;

// Zod Schema for Custom Field validation and type safety
export const customFieldSchema = z.object({
  // Primary key - auto-generated by database
  id: z.number().optional(),

  // Field name - unique identifier for the field
  name: z.string().min(1, "Field name is required"),

  // Display label - human-readable name shown in UI
  label: z.string().min(1, "Field label is required"),

  // Field type - determines the input type and validation
  type: z.enum(fieldTypes),

  // Description - optional help text for the field
  description: z.string().optional(),

  // Project this field belongs to - references Projects table
  projectId: z.number(),

  // Whether this field is required for issues
  required: z.boolean().default(false),

  // Default value for the field (stored as JSON string)
  defaultValue: z.any().optional(),

  // Configuration options for select/multiselect/radio fields
  options: z.array(z.object({
    value: z.string(),
    label: z.string(),
    color: z.string().optional()
  })).optional(),

  // Validation rules (stored as JSON)
  validation: z.object({
    min: z.number().optional(),
    max: z.number().optional(),
    pattern: z.string().optional(),
    custom: z.string().optional()
  }).optional(),

  // Display order in the form
  order: z.number().default(0),

  // Whether the field is active/enabled
  isActive: z.boolean().default(true),

  // Timestamps
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

// TypeScript Type inferred from Zod Schema
export type CustomField = z.infer<typeof customFieldSchema>;

// Schema for custom field values stored with issues
export const customFieldValueSchema = z.object({
  // Primary key
  id: z.number().optional(),

  // Issue this value belongs to
  issueId: z.number(),

  // Custom field this value is for
  customFieldId: z.number(),

  // The actual value (stored as JSON string)
  value: z.any(),

  // Timestamps
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

export type CustomFieldValue = z.infer<typeof customFieldValueSchema>;