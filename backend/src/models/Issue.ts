/**
 * ISSUE MODEL
 *
 * Defines the data structure and validation rules for Issue entities.
 * Issues are the core entities that track work items throughout their lifecycle.
 * They contain all information needed to report, track, and resolve various types of work.
 * Supports multiple issue types: Bug, Task, Story, Epic, Subtask
 */

import { z } from "zod";

// Issue types supported by the system
export const issueTypes = ["Bug", "Task", "Story", "Epic", "Subtask"] as const;

// Status options for issues
export const issueStatuses = [
  "Open", "In Progress", "Resolved", "Closed",
  "To Do", "In Review", "Done", "Backlog"
] as const;

// Priority levels
export const priorities = ["Lowest", "Low", "Medium", "High", "Highest"] as const;

// Zod Schema for Issue validation and type safety
// Comprehensive validation ensures issue reports contain necessary information
export const issueSchema = z.object({
  // Primary key - auto-generated by database
  id: z.number().optional(),

  // Issue key - unique identifier like PROJ-123
  key: z.string().optional(),

  // Issue title - concise summary of the work item
  title: z.string().min(3, "Issue title must be at least 3 characters"),

  // Detailed description - requirements, steps, acceptance criteria
  description: z.string().min(5, "Issue description must be detailed"),

  // Issue type - determines the nature of the work item
  type: z.enum(issueTypes),

  // Priority level - impacts scheduling and resource allocation
  priority: z.enum(priorities).optional().default("Medium"),

  // Current status in issue lifecycle - tracks progress toward completion
  status: z.enum(issueStatuses).optional().default("Open"),

  // User who created the issue - references Users table
  reporterId: z.number(),

  // Assigned user - references Users table, optional for initial issues
  assigneeId: z.number().optional(),

  // Project this issue belongs to - references Projects table
  projectId: z.number(),

  // Parent issue for subtasks - references Issues table
  parentId: z.number().optional(),

  // Epic this issue belongs to - references Issues table (for Stories)
  epicId: z.number().optional(),

  // Story points for agile estimation
  storyPoints: z.number().optional(),

  // Labels for categorization and filtering
  labels: z.array(z.string()).optional().default([]),

  // Components affected by this issue
  components: z.array(z.string()).optional().default([]),

  // Affected versions
  affectsVersions: z.array(z.string()).optional().default([]),

  // Fix versions
  fixVersions: z.array(z.string()).optional().default([]),

  // Due date for time-sensitive issues
  dueDate: z.date().optional(),

  // Environment where the issue occurs (for bugs)
  environment: z.string().optional(),

  // Timestamps
  createdAt: z.date().optional(),
  updatedAt: z.date().optional(),
});

// TypeScript Type inferred from Zod Schema
// Ensures type safety for all issue-related operations
export type Issue = z.infer<typeof issueSchema>;