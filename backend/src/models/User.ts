/**
 * USER MODEL
 *
 * Defines the data structure and validation rules for User entities.
 * Uses Zod for runtime type validation and TypeScript type inference.
 * Users are the core entities representing system users with different roles.
 */

import { z } from "zod";

// Zod Schema for User validation and type safety
// This schema ensures data integrity when creating or updating users
export const userSchema = z.object({
  // Primary key - auto-generated by database
  id: z.number().optional(),

  // Username - must be unique and meet minimum length requirements
  username: z.string().min(3, "Username must be at least 3 characters long"),

  // Email - must be valid email format and unique in system
  email: z.string().email("Invalid email address"),

  // Password - stored as hashed value, minimum length for security
  password: z.string().min(4, "Password must be at least 4 characters long"),

  // User role - determines permissions and access levels
  // Matches the three roles defined in the system requirements
  role: z.enum(["Admin", "Developer", "Tester"]),

  // Timestamp - automatically set when record is created
  createdAt: z.date().optional(),
});

// TypeScript Type inferred from Zod Schema
// This ensures type safety throughout the application
export type User = z.infer<typeof userSchema>;
